name: pre-commit
on:
  pull_request:
  push:
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    env:
      RAW_LOG: /tmp/pre-commit.log
      CS_XML: /tmp/pre-commit.xml
      SKIP: no-commit-to-branch
      PRE_COMMIT_NO_WRITE: 1
    steps:
      - run: sudo apt-get update && sudo apt-get install cppcheck
        if: false
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        if: false
        with:
          cache: pip
          python-version: 3.12.1
      - run: python -m pip install pre-commit
      # Cache pre-commit for speed
      # Note: PRE_COMMIT_NO_WRITE=1 prevents hooks from writing changes to disk,
      # but pre-commit still reports "files were modified" when hooks would make changes.
      # The Run pre-commit hooks step handles this by checking for actual errors vs. just "files were modified" messages.
      - uses: actions/cache/restore@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-4|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml', '.pre-commit-config-ci.yaml') }}
      - name: Run pre-commit hooks
        run: |
          set -o pipefail
          # Clean pre-commit cache to remove phantom files
          pre-commit clean
          pre-commit gc
          # Create empty log file with newline to prevent end-of-file-fixer issues
          echo "" > ${RAW_LOG}
          # Run pre-commit on all files in check-only mode
          pre-commit run --show-diff-on-failure --color=always --all-files -c .pre-commit-config-ci.yaml | tee -a ${RAW_LOG}

          # Count the number of failures and "files were modified" messages
          FAILED_COUNT=$(grep -c "Failed" ${RAW_LOG} || echo 0)
          MODIFIED_COUNT=$(grep -c "files were modified by this hook" ${RAW_LOG} || echo 0)
          ERROR_COUNT=$(grep -c "^[^-].*error:" ${RAW_LOG} || echo 0)

          echo "Found ${FAILED_COUNT} failures, ${MODIFIED_COUNT} 'files were modified' messages, and ${ERROR_COUNT} errors"

          # Check if there are any failures in the log
          if [ "${FAILED_COUNT}" -gt 0 ]; then
            # If all failures are just "files were modified" messages, consider it a success
            if [ "${FAILED_COUNT}" -eq "${MODIFIED_COUNT}" ]; then
              echo "::warning::Pre-commit reported 'Failed' but these were just 'files were modified' messages"
            # If we have actual errors (failures without "files were modified"), exit with error
            elif [ "${MODIFIED_COUNT}" -eq 0 ]; then
              echo "::error::Pre-commit found actual issues that need to be fixed"
              exit 1
            # If we have a mix of "files were modified" and other failures, check for actual errors
            elif [ "${ERROR_COUNT}" -gt 0 ]; then
              echo "::error::Pre-commit found actual errors that need to be fixed"
              exit 1
            else
              echo "::warning::Pre-commit reported 'files were modified' but no actual errors were found"
            fi
          fi
      - name: Convert Raw Log to Checkstyle format (launch action)
        uses: mdeweerd/logToCheckStyle@v2024.3.5
        with:
          in: ${{ env.RAW_LOG }}
          out: ${{ env.CS_XML }}
      - uses: actions/cache/save@v4
        if: ${{ ! cancelled() }}
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-4|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml', '.pre-commit-config-ci.yaml') }}
      - name: Provide log as artifact
        uses: actions/upload-artifact@v4
        if: ${{ ! cancelled() }}
        with:
          name: precommit-logs
          path: |
            ${{ env.RAW_LOG }}
            ${{ env.CS_XML }}
          retention-days: 2
